-- -----------------------------------------------------------------------------
-- (c) Tsitsimpis Ilias, 2011
--
-- The GAC grammar
--
-- -----------------------------------------------------------------------------

{
{-# LANGUAGE BangPatterns #-} -- required for versions of Happy before 1.18.6
{-# OPTIONS_GHC -O0 -fno-ignore-interface-pragmas #-}
{-
Careful optimisation of the parser: we don't want to throw everything
at it, because that takes too long and doesn't buy much, but we do want
to inline certain key external functions, so we instruct GHC not to
throw away inlinings as it would normally do in -O0 mode.
-}

module Parser(parser) where

import Lexer
import ErrUtils
import SrcLoc
import UnTypedAst
}

{-
-- -------------------------------------------------------------------
-- Adding location info

This is done in a stylised way using the three macros below, L0, L1
and LL.  Each of these macros can be thought of as having type

   L0, L1, LL :: a -> Located a

They each add a SrcSpan to their argument.

   L0   adds 'noSrcSpan', used for empty productions
     -- This doesn't seem to work anymore -=chak

   L1   for a production with a single token.  Grabs the SrcSpan
        from that token.

   LL   for a production with >1 token.  Makes up a SrcSpan from
        the first and last tokens.

These suffice for the majority of cases.  However, we must be
especially careful with empty productions: LL won't work if the first
or last token on the lhs can represent an empty span.  In these cases,
we have to calculate the span using more of the tokens, eg.

        | 'newtype' tycl_hdr '=' newconstr deriving
                { L (comb3 $1 $4 $5)
                    (mkTyData NewType (unLoc $2) [$4] (unLoc $5)) }

We provide comb3 and comb4 functions which are useful in such cases.

Be careful: there's no checking that you actually got this right, the
only symptom will be that the SrcSpans of your syntax will be
incorrect.

/*
 * We must expand these macros *before* running Happy, which is why this file is
 * Parser.ypp rather than just Parser.y - we run the C pre-processor first.
 */
#define L0   L noSrcSpan
#define L1   sL (getLoc $1)
#define LL   sL (comb2 $1 $>)

-- -------------------------------------------------------------------
-}

%name parser program
%tokentype { (Located Token) }
%error { happyError }
%monad { P } { >>= } { return }
%lexer { lexer } { L _ ITeof }
%expect 1

%left '|'
%left '&'
%nonassoc '==' '!=' '>' '<' '<=' '>='
%left '+' '-'
%left '*' '/' '%'
%left '!' SIGN
%nonassoc '(' ')'

%token
    BYTE        { L _ ITbyte        }
    RETURN      { L _ ITreturn      }
    ELSE        { L _ ITelse        }
    WHILE       { L _ ITwhile       }
    FALSE       { L _ ITfalse       }
    TRUE        { L _ ITtrue        }
    IF          { L _ ITif          }
    INT         { L _ ITint         }
    PROC        { L _ ITproc        }
    REFERENCE   { L _ ITreference   }
    ID          { L _ (ITid _)      }
    DIGIT       { L _ (ITdigit _)   }
    CHAR        { L _ (ITchar _)    }
    STRING      { L _ (ITstring _)  }
    '='         { L _ ITassign      }
    '+'         { L _ ITplus        }
    '-'         { L _ ITminus       }
    '*'         { L _ ITtimes       }
    '/'         { L _ ITdiv         }
    '%'         { L _ ITmod         }
    '!'         { L _ ITnot         }
    '&'         { L _ ITand         }
    '|'         { L _ ITor          }
    '=='        { L _ ITequal       }
    '!='        { L _ ITnotequal    }
    '<'         { L _ ITlt          }
    '>'         { L _ ITgt          }
    '<='        { L _ ITle          }
    '>='        { L _ ITge          }
    '('         { L _ IToparen      }
    ')'         { L _ ITcparen      }
    '{'         { L _ ITocurly      }
    '}'         { L _ ITccurly      }
    '['         { L _ ITobrack      }
    ']'         { L _ ITcbrack      }
    ','         { L _ ITcomma       }
    ':'         { L _ ITcolon       }
    ';'         { L _ ITsemi        }



%% --Like yacc, we include %% here, for no real reason.

program :: { Located UDef }
    : funcdef                       { $1 }
    | error                         {% srcParseFail "Expected function declaration" }

funcdef :: { Located UDef }
    : ID fpar ':' rtype localdefs compoundstmt
                                    { LL $ let (L span (ITid i)) = $1 in UDefFun (sL span i) $2 $4 (reverse $5) $6 }

fpar :: { [Located UParam] }
    : '(' ')'                       { [] }
    | '(' error                     {% missing ')' }
    | '(' fparlist ')'              { reverse $2 }
    | '(' fparlist error            {% missing ')' }

fparlist :: { [Located UParam] }
    : fpardef                       { [$1] }
    | fparlist ',' fpardef          { $3 : $1 }

fpardef :: { Located UParam }
    : ID ':' type                   { LL $ let (L span (ITid i)) = $1 in UParam (sL span i) ModeByVal $3 }
    | ID ':' REFERENCE type         { LL $ let (L span (ITid i)) = $1 in UParam (sL span i) ModeByRef $4 }
    | ID error                      {% missing ':' }
    | error                         {% srcParseFail "Expected parameter definition" }

type :: { Located UType }
    : datatype                      { $1 }
    | datatype '[' ']'              { LL $ UTypePtr (unLoc $1) }
    | datatype '[' error            {% missing ']' }
    | error                         {% srcParseFail ("Unknown type" ++
                                           "\n\tYou have to use either int or byte") }

datatype :: { Located UType }
    : INT                           { L1 $ UTypeInt }
    | BYTE                          { L1 $ UTypeChar }

rtype :: { Located UType}
    : datatype                      { $1 }
    | PROC                          { L1 $ UTypeProc }
    | error                         {% srcParseFail ("Unknown type" ++
                                           "\n\tYou have to use int, byte or proc") }

localdefs :: { [Located UDef] }
    : {- nothing -}                 { [] }
    | localdefs localdef            { $2 : $1 }

localdef :: { Located UDef }
    : funcdef                       { $1 }
    | vardef                        { $1 }
    | ID error                      {% srcParseFail ("Probably missing `:' for variable definition" ++
                                                        " or `(' for function definition") }
    | error                         {% srcParseFail "Expected function or variable declaration" }

vardef :: { Located UDef }
    : vardef2 ';'                   { $1 }
    | vardef2 '[' DIGIT ']' ';'     { LL $ let (L digit_span (ITdigit d)) = $3 in UDefArr $1 (sL digit_span d) }
    | vardef2 '[' '-' DIGIT ']' ';' { LL $ let (L digit_span (ITdigit d)) = $4 in UDefArr $1 (sL digit_span (-d)) }
    | vardef2 '[' DIGIT ']' error   {% missing ';' }
    | vardef2 '[' DIGIT error       {% missing ']' }
    | vardef2 '[' error             {% srcParseFail "Array size must be a positive integer" }
    | vardef2 error                 {% missing ';' }

vardef2 :: { Located UDef }
    : ID ':' datatype               { LL $ let (L span (ITid i)) = $1 in UDefVar (sL span i) $3 }

stmt :: { Located UStmt }
    : ';'                           { L1 $ UStmtNothing }
    | lvalue '=' expr ';'           { LL $ UStmtAssign $1 $3 }
    | lvalue '=' expr error         {% missing ';' }
    | lvalue '=' error              {% notValidExpr }
    | ID error                      {% missing '=' }
    | compoundstmt                  { $1 }
    | funcall ';'                   { LL $ UStmtFun $1 }
    | funcall error                 {% missing ';' }
    | IF '(' cond ')' stmt          { LL $ UStmtIf $3 $5 Nothing}
    | IF '(' cond ')' stmt ELSE stmt
                                    { LL $ UStmtIf $3 $5 (Just $7) }
    | IF '(' cond error             {% missing ')' }
    | IF '(' error                  {% notValidCond }
    | IF error                      {% missing '(' }
    | WHILE '(' cond ')' stmt       { LL $ UStmtWhile $3 $5 }
    | WHILE '(' cond error          {% missing ')' }
    | WHILE '(' error               {% notValidCond }
    | WHILE error                   {% missing '(' }
    | RETURN ';'                    { LL $ UStmtReturn Nothing }
    | RETURN error                  {% missing ';' }
    | RETURN expr ';'               { LL $ UStmtReturn (Just $2) }
    | RETURN expr error             {% missing ';' }
    | error                         {% srcParseFail "Not a valid statement" }

compoundstmt :: { Located UStmt }
    : '{' stmts '}'                 { LL $ UStmtCompound (reverse $2) }

stmts :: { [Located UStmt] }
    : {- nothing -}                 { [] }
    | stmts stmt                    { $2 : $1 }

funcall :: { Located UFuncCall }
    : ID '(' ')'                    { LL $ let (L span (ITid i)) = $1 in UFuncCall (sL span i) [] }
    | ID '(' error                  {% missing ')' }
    | ID '(' exprlist ')'           { LL $ let (L span (ITid i)) = $1 in UFuncCall (sL span i) (reverse $3) }
    | ID '(' exprlist error         {% missing ')' }

exprlist :: { [Located UExpr] }
    : expr                          { [$1] }
    | exprlist ',' expr             { $3 : $1 }
    | exprlist ',' error            {% notValidExpr }

expr :: { Located UExpr }
    : DIGIT                         { L1 $ let (ITdigit i) = (unLoc $1) in UExprInt i }
    | CHAR                          { L1 $ let (ITchar i) = (unLoc $1) in UExprChar i }
    | STRING                        { L1 $ let (ITstring i) = (unLoc $1) in UExprString i }
    | lvalue                        { L1 $ let v = unLoc $1 in UExprVar v }
    | '(' expr ')'                  { LL $ let e = unLoc $2 in e}
    | '(' expr error                {% missing ')' }
    | '(' error                     {% notValidExpr }
    | funcall                       { L1 $ let f = unLoc $1 in UExprFun f }
    | '+' expr %prec SIGN           { LL $ UExprSign (sL (getLoc $1) OpPlus) $2 }
    | '+' error %prec SIGN          {% notValidExpr }
    | '-' expr %prec SIGN           { LL $ UExprSign (sL (getLoc $1) OpMinus) $2 }
    | '-' error %prec SIGN          {% notValidExpr }
    | expr '+' expr                 { LL $ UExprOp $1 (sL (getLoc $2) OpPlus) $3 }
    | expr '+' error                {% notValidExpr }
    | expr '-' expr                 { LL $ UExprOp $1 (sL (getLoc $2) OpMinus) $3 }
    | expr '-' error                {% notValidExpr }
    | expr '*' expr                 { LL $ UExprOp $1 (sL (getLoc $2) OpTimes) $3 }
    | expr '*' error                {% notValidExpr }
    | expr '/' expr                 { LL $ UExprOp $1 (sL (getLoc $2) OpDiv) $3 }
    | expr '/' error                {% notValidExpr }
    | expr '%' expr                 { LL $ UExprOp $1 (sL (getLoc $2) OpMod) $3 }
    | expr '%' error                {% notValidExpr }

lvalue :: { Located UVariable }
    : ID                            { L1 $ let (ITid i) = unLoc $1 in UVar i }
    | ID '[' expr ']'               { LL $ let (L span (ITid i)) = $1 in UVarArray (sL span (UVar i)) $3 }
    | ID '[' expr error             {% missing ']' }
    | ID '[' error                  {% notValidExpr }

cond :: { Located UCond }
    : TRUE                          { L1 $ UCondTrue }
    | FALSE                         { L1 $ UCondFalse }
    | '(' cond ')'                  { LL $ let c = unLoc $2 in c }
    | '(' cond error                {% missing ')' }
    | '!' cond                      { LL $ UCondNot $2 }
    | '!' error                     {% notValidCond }
    | expr '==' expr                { LL $ UCondOp $1 (sL (getLoc $2) OpEqual) $3 }
    | expr '==' error               {% notValidExpr }
    | expr '!=' expr                { LL $ UCondOp $1 (sL (getLoc $2) OpNotEqual) $3 }
    | expr '!=' error               {% notValidExpr }
    | expr '<'  expr                { LL $ UCondOp $1 (sL (getLoc $2) OpLT) $3 }
    | expr '<'  error               {% notValidExpr }
    | expr '>'  expr                { LL $ UCondOp $1 (sL (getLoc $2) OpGT) $3 }
    | expr '>'  error               {% notValidExpr }
    | expr '<=' expr                { LL $ UCondOp $1 (sL (getLoc $2) OpLE) $3 }
    | expr '<=' error               {% notValidExpr }
    | expr '>=' expr                { LL $ UCondOp $1 (sL (getLoc $2) OpGE) $3 }
    | expr '>=' error               {% notValidExpr }
    | expr cond_symbols             {% condSymbol $2 }
    | cond '&'  cond                { LL $ UCondLog $1 (sL (getLoc $2) OpAnd) $3 }
    | cond '&'  error               {% notValidCond }
    | cond '|'  cond                { LL $ UCondLog $1 (sL (getLoc $2) OpOr) $3 }
    | cond '|'  error               {% notValidCond }
    | cond expr_symbols             {% compSymbol $2 }

expr_symbols :: { Located String }
    : '=='                          { L1 $ "==" }
    | '!='                          { L1 $ "!=" }
    | '<'                           { L1 $ "<"  }
    | '>'                           { L1 $ ">"  }
    | '<='                          { L1 $ "<=" }
    | '>='                          { L1 $ ">=" }

cond_symbols :: { Located String }
    : '&'                           { L1 $ "$" }
    | '|'                           { L1 $ "|" }


{

happyError :: (Located Token) -> P a
happyError _  = srcParseFail ""

-- Utilities for combining source spans
comb2 :: Located a -> Located b -> SrcSpan
comb2 a b = a `seq` b `seq` combineLocs a b

comb3 :: Located a -> Located b -> Located c -> SrcSpan
comb3 a b c = a `seq` b `seq` c `seq`
    combineSrcSpans (getLoc a) (combineSrcSpans (getLoc b) (getLoc c))

comb4 :: Located a -> Located b -> Located c -> Located d -> SrcSpan
comb4 a b c d = a `seq` b `seq` c `seq` d `seq`
    (combineSrcSpans (getLoc a) $ combineSrcSpans (getLoc b) $
                combineSrcSpans (getLoc c) (getLoc d))

-- strict constructor version:
{-# INLINE sL #-}
sL :: SrcSpan -> a -> Located a
sL span a = span `seq` a `seq` L span a


-- ---------------------------
-- Parser error messages

notValidExpr :: P a
notValidExpr = srcParseFail "Not a valid expression"

notValidCond :: P a
notValidCond = srcParseFail "Not a valid condition"

missing :: Char -> P a
missing c = srcParseFail $ "Probably missing `" ++ [c] ++ "'"

compSymbol :: Located String -> P a
compSymbol (L loc str) =
  failSpanTokP loc str "Cannot use comparison symbols in conditions"

condSymbol :: Located String -> P a
condSymbol (L loc str) =
  failSpanTokP loc str "Cannot use conditional symbols in expressions"
}
